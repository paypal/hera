server {
    lua_socket_log_errors off;
    listen 8001;
    listen 13916;
    error_log logs/stream_error.log info;

    location /mock/list {
        content_by_lua_block {
            package.path = '/usr/local/openresty/nginx/lua_files/?.lua;' .. package.path;
            local call_list_mock = require("call_list_mock");
            local nginx_utils = require("nginx_utils")
            local d = call_list_mock.list_mock_http()
            ngx.header['content-type'] = 'text/plain'
            for line in (d.." NEXT_LINE "):gmatch("(.-)".." NEXT_LINE ") do
                if (line ~= nil and line ~= "") then
                    ngx.say(line);
                end
            end
        }
    }

    location /mock/add {
        content_by_lua_block {
            package.path = '/usr/local/openresty/nginx/lua_files/?.lua;' .. package.path;
            local call_add_new_mock = require("call_add_new_mock");
            local nginx_utils = require("nginx_utils")

            nginx_utils.say_message(call_add_new_mock.add_mock_http());
        }
    }

    location /mock/flush_logs {
        content_by_lua_file 'lua_files/call_flush_logs.lua';
    }

    location /mock/getreqresp {
            content_by_lua_file 'lua_files/call_get_req_resp.lua';
        }

    location /mock/delete {
        content_by_lua_file 'lua_files/call_delete_mock.lua';
    }

    location /mock/status {
        content_by_lua_file 'lua_files/call_status.lua';
    }

    location /mock/info {
        content_by_lua_file 'lua_files/call_info.lua';
    }

    location /mock/reload {
        content_by_lua_file 'lua_files/reload.lua';
    }

    location /mock/logs {
        proxy_pass http://localhost:8200;
    }

    location /mock/rawlogs {
        proxy_pass http://localhost:8200;
    }

    location /mock/heartbeat {
        proxy_pass http://localhost:8000/heartbeat;
    }

    location /mock/test {
        proxy_pass http://localhost:8000/test;
    }

    location /mock/traffic {
        proxy_pass http://localhost:8200;
    }
}
