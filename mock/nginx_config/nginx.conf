worker_processes auto;
worker_cpu_affinity auto;
env BACKEDBY_ENV_NAME;
env HERA_TO_MOCK;
env OCC_TO_MOCK;
env HOST_HOSTNAME;
env HERA_DISABLE_SSL;
env namespace;
env nsvip;
env pool;

events {
    worker_connections  1024;
}

 http {
     include       mime.types;
     default_type  application/octet-stream;

     sendfile        on;
     keepalive_timeout  65s;
     include /etc/nginx/conf.d/*.conf;
     client_body_buffer_size 10m;
     client_max_body_size 10m;
 }

stream {
     error_log logs/stream_error.log info;
     lua_socket_log_errors off;
     lua_shared_dict mock_response 1500m;
     lua_shared_dict mock_connection 50m;
     lua_shared_dict mock_corr_connection 50m;
     lua_shared_dict mock_connection_corr 50m;
     lua_shared_dict capture_req_resp 1500m;
     lua_shared_dict capture_key 50m;
     lua_shared_dict current_capture_corr 50m;
     lua_shared_dict capture_order 50m;
     lua_shared_dict capture_order_counter 50m;
     lua_shared_dict conn_cal_thread_id 50m;
     lua_shared_dict worker_sql_state 50m;
     lua_shared_dict random_failure_state 50m;
     lua_shared_dict random_response_store 50m;
     lua_shared_dict sql_hash_cache 50m;
     lua_shared_dict object_mock_cache 500m;
     lua_shared_dict object_mock_cache_meta 500m;
     lua_shared_dict redis_req_res 50m;
     lua_shared_dict redis_response 500m;
     lua_shared_dict active_conn_count 50m;
     lua_shared_dict response_status 50m;
     lua_shared_dict port_map 10m;
     lua_shared_dict busy_worker_count 50m;

#
#    load_based_mock = {
#       "port": {
#         "200-300": {
#              "REQUEST_ID": {
#                 "Percent": FAIL_PERCENT_NUMBER,
#                 "SuccessResponse": RESPONSE1,
#                 "FailResponse", RESPONSE2
#              }
#          }
#         "300-FOREVER": {
#              "REQUEST_ID": {
#                 "Percent": FAIL_PERCENT_NUMBER,
#                 "SuccessResponse": RESPONSE1,
#                 "FailResponse", RESPONSE2
#              }
#          }
#       }
#    }
#
#
#
     lua_shared_dict load_based_mock 10m;

     init_by_lua_block {
         local mock_response = ngx.shared.mock_response;
         ngx.log(ngx.INFO, "Opening Mock data file");
         fh, err = io.open("/usr/local/openresty/nginx/conf/mock_response.txt");
         if err then
            ngx.log(ngx.ERR, "unable to read the mock response");
            return;
         end

         while true do
                 line = fh:read();
                 if line == nil then
                   break;
                 end
                 local s, e = string.find(line, "=");
                 mock_response:set(string.sub(line, 1, s-1), string.sub(line, s+1));
                 ngx.log(ngx.INFO, "Reading Mock data" .. line);
         end

         fh:close();

         fh, err = io.open("/usr/local/openresty/nginx/conf/server_ip.txt");
         if err then
          ngx.log(ngx.ERR, "unable to read the mock response");
          return;
         end

         while true do
              line = fh:read();
              if line == nil then
                break;
              end
              local s, e = string.find(line, "=");
              mock_response:set(string.sub(line, 1, s-1), string.sub(line, s+1));
              ngx.log(ngx.INFO, "Reading server info" .. line);
         end

         fh:close();

         fh, err = io.open("/usr/local/openresty/nginx/conf/port_map.txt");
         if err then
          ngx.log(ngx.ERR, "unable to read the port_map");
          return;
         end
        local port_map = ngx.shared.port_map;
         while true do
              line = fh:read();
              if line == nil then
                break;
              end
              local s, e = string.find(line, "=");
              port_map:set(string.sub(line, 1, s-1), string.sub(line, s+1));
              ngx.log(ngx.INFO, "Reading server info" .. line);
         end

         fh:close();
     }

    server {
    WHAT_TO_LISTEN
    ssl_password_file /usr/local/openresty/nginx/certs/server_key.pass;
    ssl_protocols       TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers         AES128-SHA:AES256-SHA:RC4-SHA:DES-CBC3-SHA:RC4-MD5;
    ssl_certificate     /usr/local/openresty/nginx/certs/server.crt;
    ssl_certificate_key /usr/local/openresty/nginx/certs/server.key;
    ssl_session_cache   shared:SSL:10m;
    ssl_session_timeout 10m;
    lua_ssl_protocols SSLv3 TLSv1 TLSv1.1 TLSv1.2;
    lua_ssl_ciphers AES128-SHA:AES256-SHA:RC4-SHA:DES-CBC3-SHA:RC4-MD5;
    content_by_lua_file 'lua_files/hera_handler.lua';
  }

  server {
    listen 8002;
    content_by_lua_block {
        package.path = '/usr/local/openresty/nginx/lua_files/?.lua;' .. package.path;
        local list_hera_mock = require("list_hera_mock");
        local nginx_utils = require("nginx_utils");
        nginx_utils.say_message(list_hera_mock.list_mock());
    }
  }

  server {
    listen 8003;
    content_by_lua_block {
        package.path = '/usr/local/openresty/nginx/lua_files/?.lua;' .. package.path;
        local add_hera_mock = require("add_hera_mock");
        local nginx_utils = require("nginx_utils");
        nginx_utils.say_message(add_hera_mock.add_mock_tcp());
    }
  }

  server {
    listen 8004;
    content_by_lua_file 'lua_files/delete_hera_mock.lua';
  }

   server {
      listen 8005;
      content_by_lua_file 'lua_files/get_req_resp.lua';
    }

    server {
      listen 8006;
      content_by_lua_file 'lua_files/status.lua';
    }

    server {
        listen 8007;
        content_by_lua_block {
            package.path = '/usr/local/openresty/nginx/lua_files/?.lua;' .. package.path;
            local flush_logs = require("flush_logs");
            local nginx_utils = require("nginx_utils");
            local netstring = require("netstring");
            local sock = assert(ngx.req.socket(true));
            local _, d = netstring.read(sock, "flush_logs");
            nginx_utils.say_message(flush_logs.flush_logs_tcp(d, sock));
        }
    }

    server {
      listen 8008;
      content_by_lua_file 'lua_files/info.lua';
   }
}

